/*! Sidr - v1.2.1 - 2013-11-06
 * https://github.com/artberri/sidr
 * Copyright (c) 2013 Alberto Varela; Licensed MIT */
! function(e) {
    "use strict";
    "function" == typeof define && define.amd ? define(["jquery"], e) : "undefined" != typeof module && module.exports ? module.exports = e(require("jquery")) : e(jQuery)
}(function(e) {
    var t = !1,
        i = !1,
        n = {
            isUrl: function(e) {
                var t = RegExp("^(https?:\\/\\/)?((([a-z\\d]([a-z\\d-]*[a-z\\d])*)\\.)+[a-z]{2,}|((\\d{1,3}\\.){3}\\d{1,3}))(\\:\\d+)?(\\/[-a-z\\d%_.~+]*)*(\\?[;&a-z\\d%_.~+=-]*)?(\\#[-a-z\\d_]*)?$", "i");
                return t.test(e) ? !0 : !1
            },
            loadContent: function(e, t) {
                e.html(t)
            },
            addPrefix: function(e) {
                var t = e.attr("id"),
                    i = e.attr("class");
                "string" == typeof t && "" !== t && e.attr("id", t.replace(/([A-Za-z0-9_.\-]+)/g, "sidr-id-$1")), "string" == typeof i && "" !== i && "sidr-inner" !== i && e.attr("class", i.replace(/([A-Za-z0-9_.\-]+)/g, "sidr-class-$1")), e.removeAttr("style")
            },
            execute: function(n, s, r) {
                "function" == typeof s ? (r = s, s = "sidr") : s || (s = "sidr");
                var d, a, l, c = e("#" + s),
                    u = e(c.data("body")),
                    f = e("html"),
                    p = c.outerWidth(!0),
                    m = c.data("speed"),
                    g = c.data("side"),
                    h = c.data("displace"),
                    y = c.data("onOpen"),
                    v = c.data("onClose"),
                    x = "sidr" === s ? "sidr-open" : "sidr-open " + s + "-open";
                if ("open" === n || "toggle" === n && !c.is(":visible")) {
                    if (c.is(":visible") || t) return;
                    if (i !== !1) return void o.close(i, function() {
                        o.open(s)
                    });
                    t = !0, "left" === g ? (d = {
                        left: p + "px"
                    }, a = {
                        left: "0px"
                    }) : (d = {
                        right: p + "px"
                    }, a = {
                        right: "0px"
                    }), u.is("body") && (l = f.scrollTop(), f.css("overflow-x", "hidden").scrollTop(l)), h ? u.addClass("sidr-animating").css({
                        width: u.width(),
                        position: "absolute"
                    }).animate(d, m, function() {
                        e(this).addClass(x)
                    }) : setTimeout(function() {
                        e(this).addClass(x)
                    }, m), c.css("display", "block").animate(a, m, function() {
                        t = !1, i = s, "function" == typeof r && r(s), u.removeClass("sidr-animating")
                    }), y()
                } else {
                    if (!c.is(":visible") || t) return;
                    t = !0, "left" === g ? (d = {
                        left: 0
                    }, a = {
                        left: "-" + p + "px"
                    }) : (d = {
                        right: 0
                    }, a = {
                        right: "-" + p + "px"
                    }), u.is("body") && (l = f.scrollTop(), f.removeAttr("style").scrollTop(l)), u.addClass("sidr-animating").animate(d, m).removeClass(x), c.animate(a, m, function() {
                        c.removeAttr("style").hide(), u.removeAttr("style"), e("html").removeAttr("style"), t = !1, i = !1, "function" == typeof r && r(s), u.removeClass("sidr-animating")
                    }), v()
                }
            }
        },
        o = {
            open: function(e, t) {
                n.execute("open", e, t)
            },
            close: function(e, t) {
                n.execute("close", e, t)
            },
            toggle: function(e, t) {
                n.execute("toggle", e, t)
            },
            toogle: function(e, t) {
                n.execute("toggle", e, t)
            }
        };
    e.sidr = function(t) {
        return o[t] ? o[t].apply(this, Array.prototype.slice.call(arguments, 1)) : "function" != typeof t && "string" != typeof t && t ? void e.error("Method " + t + " does not exist on jQuery.sidr") : o.toggle.apply(this, arguments)
    }, e.fn.sidr = function(t) {
        var i = e.extend({
                name: "sidr",
                speed: 200,
                side: "left",
                source: null,
                renaming: !0,
                body: "body",
                displace: !0,
                onOpen: function() {},
                onClose: function() {}
            }, t),
            s = i.name,
            r = e("#" + s);
        if (0 === r.length && (r = e("<div />").attr("id", s).appendTo(e("body"))), r.addClass("sidr").addClass(i.side).data({
                speed: i.speed,
                side: i.side,
                body: i.body,
                displace: i.displace,
                onOpen: i.onOpen,
                onClose: i.onClose
            }), "function" == typeof i.source) {
            var d = i.source(s);
            n.loadContent(r, d)
        } else if ("string" == typeof i.source && n.isUrl(i.source)) e.get(i.source, function(e) {
            n.loadContent(r, e)
        });
        else if ("string" == typeof i.source) {
            var a = "",
                l = i.source.split(",");
            if (e.each(l, function(t, i) {
                    a += '<div class="sidr-inner">' + e(i).html() + "</div>"
                }), i.renaming) {
                var c = e("<div />").html(a);
                c.find("*").each(function(t, i) {
                    var o = e(i);
                    n.addPrefix(o)
                }), a = c.html()
            }
            n.loadContent(r, a)
        } else null !== i.source && e.error("Invalid Sidr Source");
        return this.each(function() {
            var t = e(this),
                i = t.data("sidr");
            i || (t.data("sidr", s), "ontouchstart" in document.documentElement ? (t.bind("touchstart", function(e) {
                e.originalEvent.touches[0], this.touched = e.timeStamp
            }), t.bind("touchend", function(e) {
                var t = Math.abs(e.timeStamp - this.touched);
                200 > t && (e.preventDefault(), o.toggle(s))
            })) : t.click(function(e) {
                e.preventDefault(), o.toggle(s)
            }))
        })
    }
});